Игра для настоящих программистов - Журнал "Компьютерра" 
 
В экосистеме будут следующие действующие лица: 
 
Живые 
Worker - простой трудяга, подчиненный, водится в ней во множественном числе, живет в ArrayList’е. 
Boss - начальник, подчиняется БигБосу, водится во множественном числе, живет там же 
BigBoss - большой начальник, произведен из класса начальников, водится во множественном числе 
Все эти персонажи происходят из класса Employee - наемный сотрудник. 
Employee - базовый класс для всех сотрудников, не может существовать объектов такого типа. 
Boss - базовый класс для BigBossa 
Customer – заказчик, живая сущность. 
 
Неживые:  
Work - работа, разбросана в некотором количестве по полю, сама не перемещается, характеризуется лишь местонахождением  
Point – структура, содержащая в себе две переменные X и Y типа int, используется для обозначения положения сущности на поле. 
Требуется переопределить методы != == для Point и использовать именно эти операторы при необходимости сравнивать позиции сущностей. 
 
1.1 Employee  
Каждый сотрудник имеет зарплату(Salary типа decimal),  
Каждый сотрудник имеет имя(Name типа String),  
Каждый сотрудник имеет настроение(Mood типа bool)  
Каждый сотрудник имеет расположение на поле (Position типа Point) 
Каждый сотрудник должен иметь возможность что-то сказать. Для этого следует реализовать методы Say(string WhatToSay) и Talk(Employee ee). 
Данные функции должны в результате отображать на консоль сообщение в виде:  
Имя, Должность сотрудника и произносимая им фраза. 
Данная фраза должна быть различаться в зависимости от типа ee, передаваемого в Talk.  
 
Для реализации данного пункта запрещается вводить перечисление Rank или использовать какую-либо числовую переменную для обозначения, кто кого старше. Необходимо использовать is и as. 
Пример: босс, встретив старшего по званию, говорит «Здравствуйте», а равного «Привет». 
 
1.2 IMoveable 
Все объекты, которые участвуют в 'игре' реализуют интерфейс IMovable:  
- предоставляет возможность перемещать объект на поле с помощью метода Move(Point p); 
- реализует свойство IsAlive (только для чтения) показывающее, живой ли это  
объект (рабочий, босс) или неживой (работа, прибавка к зарплате) 
 
1.3 IManage и IManagable 
Босс, БигБосс и Заказчик могут управлять сотрудниками, которые находятся ниже них по иерархии (здесь для определения кто кого старше также требуется использовать is и as). Данные классы должны реализовывать интерфейс IManage. 
Рабочие и Боссы могут подчиняться старшему по званию. Данные классы реализуют интерфейс IManagable. 
Интерфейс IManagable включает: 
- метод DoWork (реализацию придумайте сами, например, может портиться настроение или уменьшаться зарплата) 
 
Интерфейс IManage включает: 
- метод Manage(IManagable imngbl), в котором вызывается imngbl.DoWork 
 
1.4 Customer 
- не имеет зарплаты,  
- не может здороваться,   
- может перемещаться по полю, 
- может раскидывать работы,  
- может управлять персоналом  
 
Этот класс не может и не должен быть наследован от Employee 
 
2. Функциональность 
В начале выполнения программы создается некоторое количество сотрудников разных типов, им случайным образом присваиваются координаты, присваивается зарплата (по умолчанию, либо больше, чем по умолчанию) и имя (по умолчанию, если это допустимо, или случайным образом из некоторого пула допустимых имен), по полю "раскидывается" случайное количество работы.  
 
На каждом шаге программы сотрудники перемещаются случайным образом (на соседнюю клетку) по полю и выполняют действия:  
 
1. Поздороваться,  если на данной клетке находится другой служащий.  
2. Выполнить работу, выполняется в том случае, если на данной клетке находится работа. После выполнения работы она исчезает и появляется в другом случайно выбранном месте на поле. Если на клетку с работой попадает сразу несколько сотрудников, то выполняет ее «первый, кто успел». 
 
3. Придумайте какое-либо свое действие, которым могли бы заниматься служащие, и реализуйте его. Например, можно создать класс SalaryAddition (прибавка к Зарплате). Объекты данного класса так же раскиданы по 
полю (их может раскидывать BigBoss), при встрече с SalaryAddition у работника повышается зарплата, а объект SalaryAddition исчезает.  
 
Работники ходят по полю до тех пор, пока не истечет "рабочий день". 
События, таймеры, многопоточность пока не проходили, поэтому следует обойтись без них.  
 
В цикле do/while проверяется окончание рабочего дня путем сравнения времени окончания работы (устанавливается константой) с текущим временем (например, рабочий день нашего террариума может длиться минуту).